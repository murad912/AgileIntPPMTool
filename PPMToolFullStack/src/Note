Security Implimentation Step /Token based Authentication with Spring Security & JWT
This Implementation is updated need some modification for future use
In Token Authentication a server doesn't hold a session that why we are using token stateless

1) Add Dependency
        dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.0</version>
		</dependency>

2) SecurityConfig.java
//we enable the below extension incase we need for future for example if we need to develop thymeleaf( "/**/*.html",)
                .headers().frameOptions().sameOrigin() //To enable H2 Database
                .antMatchers(
                        "/",
                        "/favicon.ico",
                        "/**/*.png",
                        "/**/*.gif",
                        "/**/*.svg",
                        "/**/*.jpg",
                        "/**/*.html",
                        "/**/*.css",
                        "/**/*.js"
                ).permitAll()

3)JwtAuthenticationEntryPoint.java
// it's an interface which provide a method called commence
//commence in interface AuthenticationEntryPoint
    @Override
    public void commence(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,
                         AuthenticationException e) throws IOException, ServletException {

4) InvalidLoginResponse.java
//username and password field name

5) User.java, UserRepository and UserService (POST API to create user)
   //User is extending UserDetail and impliment a method
    /*
       UserDetails interface methods
        */

       @Override
       @JsonIgnore  //this anotation will ignore a method from displaying in the postman or UI
       public Collection<? extends GrantedAuthority> getAuthorities() {
           return null;
       }

       @Override
       @JsonIgnore
       public boolean isAccountNonExpired() {
           return true;
       }

       @Override
       @JsonIgnore
       public boolean isAccountNonLocked() {
           return true;
       }

       @Override
       @JsonIgnore
       public boolean isCredentialsNonExpired() {
           return true;
       }

       @Override
       @JsonIgnore
       public boolean isEnabled() {
           return true;
       }

-> UserService inject BCryptPasswordEncoder and put a bean in maim app
        @SpringBootApplication
        public class PpmtoolApplication {
        ---HERE-------------------------------------------------------
            @Bean
            BCryptPasswordEncoder bCryptPasswordEncoder(){
                return new BCryptPasswordEncoder();
            }

            public static void main(String[] args) {
                SpringApplication.run(PpmtoolApplication.class, args);
            }
        }

6)UserValidator.java
    @Component
      public class UserValidator implements Validator {

          @Override
          public boolean supports(Class<?> aClass) {
              return User.class.equals(aClass);
          }

          @Override
          public void validate(Object object, Errors errors) {

              User user = (User) object;

              if(user.getPassword().length() <6){
                  errors.rejectValue("password","Length", "Password must be at least 6 characters");
              }

              if(!user.getPassword().equals(user.getConfirmPassword())){
                  errors.rejectValue("confirmPassword","Match", "Passwords must match");

              }

              //confirmPassword

          }

 7) JwtTokenProvider.java -> generate token in this class